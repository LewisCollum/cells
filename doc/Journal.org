#+property: header-args :main no :results output :flags -std=c++2a -O3

** [5/5] 2020-01-08
*** DONE Use map<ENUM, NeighborType*> for Neighbors
    CLOSED: [2020-01-09 Thu 11:19]
*** DONE Ensure random selection of neighbors is possible
    https://gist.github.com/cbsmith/5538174
    CLOSED: [2020-01-09 Thu 15:00]
*** DONE Write CellGrid::setCellNeighborsFromGrid(CellGrid grid)
    CLOSED: [2020-01-09 Thu 17:31]
*** DONE Finish testing CellGrid for Neighbor setting
    CLOSED: [2020-01-09 Thu 20:52]
*** DONE Write singleton BinaryTree with function BinaryTree::onCellGrid(CellGrid grid) 
    CLOSED: [2020-01-09 Thu 21:49]
** [6/7] 2020-01-09
*** DONE Test Neighbors for detaching
    CLOSED: [2020-01-09 Thu 14:58]
*** DONE Add class NeighborSelector that can choose from all or some of Neighbors::all
    CLOSED: [2020-01-09 Thu 19:56]
*** DONE Add feature for Cells to 'detach' from the CellGrid
    CLOSED: [2020-01-14 Tue 20:47]
*** DONE Fix getEast()->linker bug
    1. getEast is a pointer and I did not check if it was nullptr before dereferencing
    2. NeighborSelector::select returned garbage if there were no non-null inputs. Now it returns a nullptr (which can be checked for).
    CLOSED: [2020-01-09 Thu 21:43]
*** TODO Refactor GridConverter
*** DONE Refactor BinaryTree (remove double for loop)
    CLOSED: [2020-01-10 Fri 13:37]
*** DONE Commit Changes
    CLOSED: [2020-01-10 Fri 11:39]
** [3/3] 2020-01-10
*** Grid now uses a 1D array instead of a nested 2D array  
    - Indexing is done by the 'at' function which returns grid[y * columns + x]
    - Now we need to be able to iterate over all Elements in the grid.
*** DONE Make forward iterator for Grid class
    ~auto begin() { return grid.begin(); }~
    ~auto end() { return grid.end(); }~
    CLOSED: [2020-01-10 Fri 13:36]
*** DONE Make library functions take references instead of pointers
    CLOSED: [2020-01-10 Fri 23:07]
*** DONE Remove unused includes in Cell
    CLOSED: [2020-01-11 Sat 14:52]
*** TODO Implement Dijkstra's
** [1/3] 2020-01-12
*** DONE Make 'Neighbors' iterable so I can delete NeighborsSelector (which is just a RandomSelector wrapper).
    Had to refactor RandomSelector with tag dispatching
    CLOSED: [2020-01-12 Sun 23:05]
*** TODO Make isMapType not dependent on the [] operator.
*** TODO Get forward_list out of RandomSelector.
** [2/3] 2020-01-13
*** DONE Use Linker in Neighbors instead of explicity std::forward_list
    CLOSED: [2020-01-14 Tue 20:47]
*** DONE Bidirectional detach for neighbors. Make NeighborType just Neighbors and add a RootType.
    CLOSED: [2020-01-14 Tue 20:47]
    #+BEGIN_SRC C++
if (detachable != all.end())
    detachable.detach(*this);
    all.erase(detachable);
    #+END_SRC
*** TODO Make AldousBroder not depend on grid size or rethink how Rooms are implemented.
** [1/2] 2020-01-14
*** DONE Make Linker have compile-time determined 'link' and 'unlink' functions.
    CLOSED: [2020-01-14 Tue 20:47]
    - Not ~if (isBidirectional) other.link(*this)~
*** TODO Make template<size_t columns, size_t rows> CellGrid::fromNeighborGrid(NeighborGrid::Type<columns, rows> neighborGrid)
** [0/2] 2020-01-15
*** Journal   
    - 16:19 Changing Neighbors 'value_type' from Neighbors* to NeighborType
    - 18:00 Neighbors linking should be unidirectional (with
      ForwardLinker). Bidirectional linking and unlinking should not be
      defined at the same scope because there is no guarantee that
      NeighborType has methods to link and unlink. You could make
      static methods that do bidirectional unlinking, like,
      ~Neighbors<NeighborType>::unlink(Neighbors a, Neighbors b)~
    - 23:40 Neighbors must link to other neighbors for walker
      algorithms to work (e.g. aldous broder). This is because these
      algorithms traverse the neighbors, and traversal cannot happen
      if neighbors points to anything other than another neighbors.
    - 1:00 Neighbors should point to cell, a struct (like it used
      to). Cells can be made unpackable (structured binding).
*** TODO Use iterators instead of indices for CellGrid::forEachCell
*** TODO Make a Cell struct (again) and make it structed binding compatible
** [0/1] 2020-01-16
*** Journal
    #+BEGIN_SRC C++ 
#include <forward_list>
#include <iostream>
#include <typeinfo>
#include <functional>

template <typename Container>
struct Direction {    
    Container::value_type * direction = nullptr;
    std::function<void(typename Container::value_type &)> onSet;

    Direction& operator=(typename Container::value_type & assignment) {
        direction = &assignment;
        onSet(direction);
        return *this;
    }
};

struct Cell{};

struct Neighbors {
    using container_type = std::forward_list<Cell*>;
    container_type neighbors;
    Direction<container_type> east;
    Neighbors() {
        east.onSet = [&](auto v){ neighbors.emplace_front(v); };
    }
    Direction<container_type> west;
    Direction<container_type> south;
    Direction<container_type> north;
};

int main() {
    // std::forward_list<Cell> neighbors;
    // Direction east{neighbors};

    // Cell someCell{};
    // east = someCell;
    // std::cout << typeid(east).name();
    // return 0;
}

// struct Cell {
//     Neighbors<Cell>
//     Linker<Cell>
// };


    
// Grid<Cell, 4, 4> grid;
// auto & [neighbors, linker] = grid.at(0, 0);
// linker.link(neighbors.east)

    #+END_SRC

    #+RESULTS:

*** TODO Make Cell a tuple-like struct 

** [/] 2020-01-19
   
